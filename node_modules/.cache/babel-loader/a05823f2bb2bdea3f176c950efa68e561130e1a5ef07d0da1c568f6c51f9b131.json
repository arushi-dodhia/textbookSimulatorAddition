{"ast":null,"code":"export function calculateBinaryAddition(binary1, binary2) {\n  const length = Math.max(binary1.length, binary2.length);\n  const bin1 = binary1.padStart(length, \"0\");\n  const bin2 = binary2.padStart(length, \"0\");\n  let carry = 0;\n  let steps = [];\n  let sum = \"\";\n  for (let i = length - 1; i >= 0; i--) {\n    const bit1 = parseInt(bin1[i], 10);\n    const bit2 = parseInt(bin2[i], 10);\n    const bitSum = bit1 + bit2 + carry;\n    sum = bitSum % 2 + sum;\n    carry = Math.floor(bitSum / 2);\n\n    // Save the intermediate step\n    steps.unshift(`Step: ${bin1.slice(0, i)}${bit1} + ${bin2.slice(0, i)}${bit2} = ${bitSum % 2} (Carry: ${carry})`);\n  }\n  if (carry) {\n    sum = carry + sum;\n    steps.unshift(`Final carry: ${carry} added to the result`);\n  }\n  return {\n    steps,\n    result: sum\n  };\n}\nexport function calculateBinarySubtraction(binary1, binary2) {\n  const length = Math.max(binary1.length, binary2.length);\n  const bin1 = binary1.padStart(length, \"0\");\n  const bin2 = binary2.padStart(length, \"0\");\n  let borrow = 0;\n  let steps = [];\n  let diff = \"\";\n  for (let i = length - 1; i >= 0; i--) {\n    const bit1 = parseInt(bin1[i], 10);\n    const bit2 = parseInt(bin2[i], 10);\n    let bitDiff = bit1 - bit2 - borrow;\n    if (bitDiff < 0) {\n      bitDiff += 2; // Borrowing occurs, so we add 2\n      borrow = 1;\n    } else {\n      borrow = 0;\n    }\n    diff = bitDiff + diff;\n\n    // Save the intermediate step\n    steps.unshift(`Step: ${bin1.slice(0, i)}${bit1} - ${bin2.slice(0, i)}${bit2} = ${bitDiff} (Borrow: ${borrow})`);\n  }\n  return {\n    steps,\n    result: diff\n  };\n}","map":{"version":3,"names":["calculateBinaryAddition","binary1","binary2","length","Math","max","bin1","padStart","bin2","carry","steps","sum","i","bit1","parseInt","bit2","bitSum","floor","unshift","slice","result","calculateBinarySubtraction","borrow","diff","bitDiff"],"sources":["/Users/arushidodhia/Desktop/252textbook/addandsubtract/src/addorsubtract.js"],"sourcesContent":["export function calculateBinaryAddition(binary1, binary2) {\n    const length = Math.max(binary1.length, binary2.length);\n    const bin1 = binary1.padStart(length, \"0\");\n    const bin2 = binary2.padStart(length, \"0\");\n    let carry = 0;\n    let steps = [];\n    let sum = \"\";\n  \n    for (let i = length - 1; i >= 0; i--) {\n      const bit1 = parseInt(bin1[i], 10);\n      const bit2 = parseInt(bin2[i], 10);\n      const bitSum = bit1 + bit2 + carry;\n  \n      sum = (bitSum % 2) + sum;\n      carry = Math.floor(bitSum / 2);\n  \n      // Save the intermediate step\n      steps.unshift(\n        `Step: ${bin1.slice(0, i)}${bit1} + ${bin2.slice(0, i)}${bit2} = ${\n          bitSum % 2\n        } (Carry: ${carry})`\n      );\n    }\n  \n    if (carry) {\n      sum = carry + sum;\n      steps.unshift(`Final carry: ${carry} added to the result`);\n    }\n  \n    return { steps, result: sum };\n  }\n  \n  export function calculateBinarySubtraction(binary1, binary2) {\n    const length = Math.max(binary1.length, binary2.length);\n    const bin1 = binary1.padStart(length, \"0\");\n    const bin2 = binary2.padStart(length, \"0\");\n    let borrow = 0;\n    let steps = [];\n    let diff = \"\";\n  \n    for (let i = length - 1; i >= 0; i--) {\n      const bit1 = parseInt(bin1[i], 10);\n      const bit2 = parseInt(bin2[i], 10);\n      let bitDiff = bit1 - bit2 - borrow;\n  \n      if (bitDiff < 0) {\n        bitDiff += 2; // Borrowing occurs, so we add 2\n        borrow = 1;\n      } else {\n        borrow = 0;\n      }\n  \n      diff = bitDiff + diff;\n  \n      // Save the intermediate step\n      steps.unshift(\n        `Step: ${bin1.slice(0, i)}${bit1} - ${bin2.slice(0, i)}${bit2} = ${\n          bitDiff\n        } (Borrow: ${borrow})`\n      );\n    }\n  \n    return { steps, result: diff };\n  }"],"mappings":"AAAA,OAAO,SAASA,uBAAuBA,CAACC,OAAO,EAAEC,OAAO,EAAE;EACtD,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACJ,OAAO,CAACE,MAAM,EAAED,OAAO,CAACC,MAAM,CAAC;EACvD,MAAMG,IAAI,GAAGL,OAAO,CAACM,QAAQ,CAACJ,MAAM,EAAE,GAAG,CAAC;EAC1C,MAAMK,IAAI,GAAGN,OAAO,CAACK,QAAQ,CAACJ,MAAM,EAAE,GAAG,CAAC;EAC1C,IAAIM,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,GAAG,GAAG,EAAE;EAEZ,KAAK,IAAIC,CAAC,GAAGT,MAAM,GAAG,CAAC,EAAES,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpC,MAAMC,IAAI,GAAGC,QAAQ,CAACR,IAAI,CAACM,CAAC,CAAC,EAAE,EAAE,CAAC;IAClC,MAAMG,IAAI,GAAGD,QAAQ,CAACN,IAAI,CAACI,CAAC,CAAC,EAAE,EAAE,CAAC;IAClC,MAAMI,MAAM,GAAGH,IAAI,GAAGE,IAAI,GAAGN,KAAK;IAElCE,GAAG,GAAIK,MAAM,GAAG,CAAC,GAAIL,GAAG;IACxBF,KAAK,GAAGL,IAAI,CAACa,KAAK,CAACD,MAAM,GAAG,CAAC,CAAC;;IAE9B;IACAN,KAAK,CAACQ,OAAO,CACX,SAASZ,IAAI,CAACa,KAAK,CAAC,CAAC,EAAEP,CAAC,CAAC,GAAGC,IAAI,MAAML,IAAI,CAACW,KAAK,CAAC,CAAC,EAAEP,CAAC,CAAC,GAAGG,IAAI,MAC3DC,MAAM,GAAG,CAAC,YACAP,KAAK,GACnB,CAAC;EACH;EAEA,IAAIA,KAAK,EAAE;IACTE,GAAG,GAAGF,KAAK,GAAGE,GAAG;IACjBD,KAAK,CAACQ,OAAO,CAAC,gBAAgBT,KAAK,sBAAsB,CAAC;EAC5D;EAEA,OAAO;IAAEC,KAAK;IAAEU,MAAM,EAAET;EAAI,CAAC;AAC/B;AAEA,OAAO,SAASU,0BAA0BA,CAACpB,OAAO,EAAEC,OAAO,EAAE;EAC3D,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACJ,OAAO,CAACE,MAAM,EAAED,OAAO,CAACC,MAAM,CAAC;EACvD,MAAMG,IAAI,GAAGL,OAAO,CAACM,QAAQ,CAACJ,MAAM,EAAE,GAAG,CAAC;EAC1C,MAAMK,IAAI,GAAGN,OAAO,CAACK,QAAQ,CAACJ,MAAM,EAAE,GAAG,CAAC;EAC1C,IAAImB,MAAM,GAAG,CAAC;EACd,IAAIZ,KAAK,GAAG,EAAE;EACd,IAAIa,IAAI,GAAG,EAAE;EAEb,KAAK,IAAIX,CAAC,GAAGT,MAAM,GAAG,CAAC,EAAES,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpC,MAAMC,IAAI,GAAGC,QAAQ,CAACR,IAAI,CAACM,CAAC,CAAC,EAAE,EAAE,CAAC;IAClC,MAAMG,IAAI,GAAGD,QAAQ,CAACN,IAAI,CAACI,CAAC,CAAC,EAAE,EAAE,CAAC;IAClC,IAAIY,OAAO,GAAGX,IAAI,GAAGE,IAAI,GAAGO,MAAM;IAElC,IAAIE,OAAO,GAAG,CAAC,EAAE;MACfA,OAAO,IAAI,CAAC,CAAC,CAAC;MACdF,MAAM,GAAG,CAAC;IACZ,CAAC,MAAM;MACLA,MAAM,GAAG,CAAC;IACZ;IAEAC,IAAI,GAAGC,OAAO,GAAGD,IAAI;;IAErB;IACAb,KAAK,CAACQ,OAAO,CACX,SAASZ,IAAI,CAACa,KAAK,CAAC,CAAC,EAAEP,CAAC,CAAC,GAAGC,IAAI,MAAML,IAAI,CAACW,KAAK,CAAC,CAAC,EAAEP,CAAC,CAAC,GAAGG,IAAI,MAC3DS,OAAO,aACIF,MAAM,GACrB,CAAC;EACH;EAEA,OAAO;IAAEZ,KAAK;IAAEU,MAAM,EAAEG;EAAK,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}